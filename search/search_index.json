{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Code on GitHub</p>"},{"location":"#overview","title":"Overview","text":"<p>Hydra is a C++ library for performing Exact Diagonalizations of quantum many-body systems. Key features include optimized combinatorical algorithms for navigating Hilbert spaces, iterative algorithms for solving large-scale eigenvalue problems, and efficient parallelization. </p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#c-compilation","title":"C++ Compilation","text":"<p>Using hydra with C++ is a two-step process. First the <code>hydra</code> library needs to be compiled and installed. Therafter, application codes are compiled in a second step. Here we explain how to compile the library.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>A C++ compiler that supports C++17 (<code>g++</code>, <code>clang</code>, or Intel's <code>icpx</code>)</li> <li>git version control system</li> <li>CMake build system generator </li> <li>A linear algebra backend (Blas/Lapack, IntelMKL or Accelerate on OSX)</li> <li>optional HDF5, OpenMP</li> <li>optional MPI for the distributed library</li> </ul>"},{"location":"installation/#basic-compilation","title":"Basic Compilation","text":"<ul> <li> <p>Download the source code using git <pre><code>cd /path/where/hydra/should/be\ngit clone https://github.com/awietek/hydra.git\n</code></pre></p> </li> <li> <p>Compile the default library <pre><code>cd hydra\ncmake -S . -B build\ncmake --build build\ncmake --install build\n</code></pre>   By default, the library is now installed in the subdirectory <code>install</code>.</p> </li> <li> <p>Compile the distributed library</p> <p>To use the distributed computing features of <code>hydra</code>, the distributed library has to be built which requires MPI. <pre><code>cd hydra\ncmake -S . -B build -D HYDRA_DISTRIBUTED=On\ncmake --build build\ncmake --install build\n</code></pre></p> </li> </ul>"},{"location":"installation/#advanced-compilation","title":"Advanced Compilation","text":"<ul> <li> <p>Parallel compilation     To speed up the compilation process, the build step can be performed in parallel using the <code>-j</code> flag</p> <pre><code>cmake --build build -j\n</code></pre> </li> <li> <p>Listing compile options</p> <p>The available compilation options can be displayed using <pre><code>cmake -L .\n</code></pre></p> </li> <li> <p>Choosing a certain compiler</p> <p>The compiler (e.g. <code>icpx</code>) can be specified using <pre><code>cmake -S . -B build -D CMAKE_CXX_COMPILER=icpx\n</code></pre></p> <p>Warning</p> <p>If the <code>hydra</code> library is compiled with a certain compiler, it is advisable to also compile the application codes with the same compiler.</p> </li> <li> <p>Setting the install path</p> <p>In the installation step, the install directory can be set in the following way <pre><code>cmake --install build --prefix /my/install/prefix\n</code></pre></p> </li> <li> <p>Disabling HDF5/OpenMP</p> <p>To disable support for HDF5 or OpenMP support, use <pre><code>cmake -S . -B build -D HYDRA_DISABLE_OPENMP=On -D HYDRA_DISABLE_HDF5=On\n</code></pre></p> </li> <li> <p>Building and running tests</p> <p>To compile and run the testing programs, use <pre><code>cmake -S . -B build -D BUILD_TESTING=On\ncmake --build build\nbuild/tests/tests\n</code></pre></p> </li> </ul>"},{"location":"quickstart/","title":"Quick start","text":""},{"location":"quickstart/#hello-world","title":"Hello World","text":"<p>Let us set up our first program using the <code>hydra</code> library. For this we need to create two files. The first is the actual <code>C++</code> code.</p> <pre><code>#include &lt;hydra/all.h&gt;\n\nusing namespace hydra;\n\nint main() try {\n  say_hello();\n} catch (std::exception const &amp;e) {\n  traceback(e);\n}\n</code></pre> <p>The function <code>say_hello()</code> prints out a welcome message, which also contains information which exact hydra version is used. What is maybe a bit unfamiliar is the <code>try / catch</code> block. Hydra implements a traceback mechanism for runtime errors, which is activated by this idiom. While not stricly necessary here, it is a good practice to make use of this.</p> <p>Now that the application program is written, we next need to set up the compilation instructions using CMake. To do so we create a second file called <code>CMakeLists.txt</code> in the same directory.</p> <pre><code>cmake_minimum_required(VERSION 3.19)\n\nproject(\n  hello_world\n  LANGUAGES CXX\n)\n\nfind_package(hydra REQUIRED HINTS \"/path/to/hydra/install\")\nadd_executable(main main.cpp)\ntarget_link_libraries(main PUBLIC hydra::hydra)\n</code></pre> <p>You should replace <code>\"/path/to/hydra/install\"</code> with the appropriate directory where your hydra library is installed after compilation. This exact <code>CMakeLists.txt</code> file can be used to compile any hydra application.</p> <p>We then compile the application code,</p> <pre><code>cmake -S . -B build\ncmake --build build\n</code></pre> <p>and finally run our first <code>hydra</code> application.</p> <pre><code>./build/main\n</code></pre>"}]}